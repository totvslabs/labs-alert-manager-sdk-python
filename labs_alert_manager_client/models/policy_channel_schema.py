# coding: utf-8

"""
    alertmanager

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class PolicyChannelSchema(BaseModel):
    """
    PolicyChannelSchema
    """
    client_uuid: StrictStr = Field(..., description="Client uuid. This is the id defined by client app")
    config: Dict[str, Any] = Field(..., description="Policy Channel config")
    created_at: Optional[datetime] = None
    deleted: StrictBool = Field(..., description="Policy Channel deleted flag")
    enabled: StrictBool = Field(..., description="Policy Channel enabled flag")
    id: StrictStr = Field(..., description="Id")
    last_notification: Optional[datetime] = None
    name: StrictStr = Field(..., description="Policy Channel name")
    type: StrictStr = Field(..., description="Policy Channel type")
    updated_at: Optional[datetime] = None
    __properties = ["client_uuid", "config", "created_at", "deleted", "enabled", "id", "last_notification", "name", "type", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PolicyChannelSchema:
        """Create an instance of PolicyChannelSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if last_notification (nullable) is None
        # and __fields_set__ contains the field
        if self.last_notification is None and "last_notification" in self.__fields_set__:
            _dict['last_notification'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyChannelSchema:
        """Create an instance of PolicyChannelSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyChannelSchema.parse_obj(obj)

        _obj = PolicyChannelSchema.parse_obj({
            "client_uuid": obj.get("client_uuid"),
            "config": obj.get("config"),
            "created_at": obj.get("created_at"),
            "deleted": obj.get("deleted"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "last_notification": obj.get("last_notification"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


