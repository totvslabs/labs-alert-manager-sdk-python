# coding: utf-8

"""
    alertmanager

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PolicySchema(BaseModel):
    """
    PolicySchema
    """ # noqa: E501
    channels: List[StrictStr] = Field(description="List of channel notification")
    client_source: StrictStr = Field(description="Policy Client source")
    client_uuid: StrictStr = Field(description="Policy Client UUID")
    created_at: Optional[datetime] = None
    deleted: StrictBool = Field(description="Policy deleted")
    enabled: StrictBool = Field(description="Policy enabled")
    filters: Union[str, Any] = Field(description="Policy filters")
    frequency: StrictBool = Field(description="Enable alert frequency for the policy")
    frequency_minutes: StrictInt = Field(description="Quantity of alert interval time")
    frequency_occurrences: StrictInt = Field(description="Quantity of alert occurrencies")
    id: StrictStr = Field(description="Id")
    name: StrictStr = Field(description="Policy name")
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["channels", "client_source", "client_uuid", "created_at", "deleted", "enabled", "filters", "frequency", "frequency_minutes", "frequency_occurrences", "id", "name", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PolicySchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PolicySchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channels": obj.get("channels"),
            "client_source": obj.get("client_source"),
            "client_uuid": obj.get("client_uuid"),
            "created_at": obj.get("created_at"),
            "deleted": obj.get("deleted"),
            "enabled": obj.get("enabled"),
            "filters": obj.get("filters"),
            "frequency": obj.get("frequency"),
            "frequency_minutes": obj.get("frequency_minutes"),
            "frequency_occurrences": obj.get("frequency_occurrences"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


