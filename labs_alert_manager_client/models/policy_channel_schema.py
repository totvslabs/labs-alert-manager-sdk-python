# coding: utf-8

"""
    alertmanager

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PolicyChannelSchema(BaseModel):
    """
    PolicyChannelSchema
    """ # noqa: E501
    client_uuid: StrictStr = Field(description="Client uuid. This is the id defined by client app")
    config: Union[str, Any] = Field(description="Policy Channel config")
    created_at: Optional[datetime] = None
    deleted: StrictBool = Field(description="Policy Channel deleted flag")
    enabled: StrictBool = Field(description="Policy Channel enabled flag")
    id: StrictStr = Field(description="Id")
    last_notification: Optional[datetime] = None
    name: StrictStr = Field(description="Policy Channel name")
    type: StrictStr = Field(description="Policy Channel type")
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["client_uuid", "config", "created_at", "deleted", "enabled", "id", "last_notification", "name", "type", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PolicyChannelSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if last_notification (nullable) is None
        # and model_fields_set contains the field
        if self.last_notification is None and "last_notification" in self.model_fields_set:
            _dict['last_notification'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PolicyChannelSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_uuid": obj.get("client_uuid"),
            "config": obj.get("config"),
            "created_at": obj.get("created_at"),
            "deleted": obj.get("deleted"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "last_notification": obj.get("last_notification"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


