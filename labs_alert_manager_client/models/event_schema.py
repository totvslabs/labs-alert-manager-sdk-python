# coding: utf-8

"""
    alertmanager

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EventSchema(BaseModel):
    """
    EventSchema
    """ # noqa: E501
    client_source: StrictStr = Field(description="Event souce")
    client_uuid: StrictStr = Field(description="Client uuid. This is the id defined by client app")
    created_at: Optional[datetime] = None
    data: Union[str, Any] = Field(description="Event data")
    event_type: StrictStr = Field(description="Event type")
    id: StrictStr = Field(description="Id")
    labels: Union[str, Any] = Field(description="Event labels")
    schema_version: StrictStr = Field(description="Event schema version. Can be used by client app to know how to parse the event")
    severity: StrictStr = Field(description="Event severity")
    status: StrictStr = Field(description="Event status, Received, Stored")
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["client_source", "client_uuid", "created_at", "data", "event_type", "id", "labels", "schema_version", "severity", "status", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EventSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EventSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_source": obj.get("client_source"),
            "client_uuid": obj.get("client_uuid"),
            "created_at": obj.get("created_at"),
            "data": obj.get("data"),
            "event_type": obj.get("event_type"),
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "schema_version": obj.get("schema_version"),
            "severity": obj.get("severity"),
            "status": obj.get("status"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


